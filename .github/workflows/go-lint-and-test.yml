name: Go Lint and Test

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    lint-and-test:
        name: Lint and Test
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4
            - name: Set up Go
              uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5
              with:
                  # renovate: datasource=github-tags depName=golang/go
                  go-version: "1.23.2"

            - name: Print Go version
              run: go version

            - name: Run golangci-lint
              uses: golangci/golangci-lint-action@971e284b6050e8a5849b72094c50ab08da042db8 # v6
              with:
                  # renovate: datasource=github-releases depName=golangci/golangci-lint
                  version: v1.61.0
                  args: --verbose --concurrency=2

            - name: Run tests
              run: go test -v ./...

            - name: Set git variables
              id: git_vars
              run: |
                  echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
                  echo "GIT_REF=$(git describe --tags --always)" >> $GITHUB_OUTPUT

            - name: Build binaries with version info
              run: |
                  CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-X main.gitHash=${{ steps.git_vars.outputs.GIT_HASH }} -X main.gitRef=${{ steps.git_vars.outputs.GIT_REF }}" -o aws-ecr-auth-proxy-amd64 ./cmd/main.go
                  CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags "-X main.gitHash=${{ steps.git_vars.outputs.GIT_HASH }} -X main.gitRef=${{ steps.git_vars.outputs.GIT_REF }}" -o aws-ecr-auth-proxy-arm64 ./cmd/main.go

            - name: Test binary execution (AMD64)
              run: |
                  chmod +x aws-ecr-auth-proxy-ubuntu-amd64
                  ./aws-ecr-auth-proxy-ubuntu-amd64 version

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build and test Docker images
              run: |
                  # Build AMD64 image
                  docker buildx build --platform linux/amd64 \
                    -t aws-ecr-auth-proxy:test-amd64 \
                    --build-arg ARCH=amd64 \
                    -f Dockerfile \
                    --load .

                  # Test AMD64 image
                  docker run --rm aws-ecr-auth-proxy:test-amd64 /app/aws-ecr-auth-proxy version

                  # Build ARM64 image
                  docker buildx build --platform linux/arm64 \
                    -t aws-ecr-auth-proxy:test-arm64 \
                    --build-arg ARCH=arm64 \
                    -f Dockerfile \
                    --load .

                  # Test ARM64 image
                  docker run --rm --platform linux/arm64 aws-ecr-auth-proxy:test-arm64 /app/aws-ecr-auth-proxy version
